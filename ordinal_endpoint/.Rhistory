"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = as.factor(x.4),
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
class(x.dat)
class(x.dat$V4)
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = x.dat,
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = x,
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = x,
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
x[1, 1]
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = x.4,
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
x.4[1, 1]
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = x.4[, 1],
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
r$r.a[1, , 1]
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = r$r.a[1, , 1],
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = r$r.a[1, , 1],
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = r$r.a[1, , 1],
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
r$r.a[1, , 1]
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = r$r.a[1, , 1],
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = r$r.a[1, , 1],
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
fitjags <- jags.model ("model_ordinal_fixed1.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
"x" = r$r.a,
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
source("do_simulation.R")
source("generate_data.R")
source("models.R")
source("evaluate.R")
system.time(sim.study1 <- do.sim(n.sim = 100,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
system.time(sim.study1 <- do.sim(n.sim = 100,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
system.time(sim.study1 <- do.sim(n.sim = 100,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
sim.study1$p_res
system.time(sim.study1 <- do.sim(n.sim = 100,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
x <- as.integer(sample(1:100, 7, replace = T))
x
fitjags <- jags.model ("model_multi.txt",
list ("x" = x),
n.chains = 2, quiet = T, n.adapt = 1000)
require(coda)
require(rjags)
x <- as.integer(sample(1:100, 7, replace = T))
fitjags <- jags.model ("model_multi.txt",
list ("x" = x),
n.chains = 2, quiet = T, n.adapt = 1000)
x <- as.integer(sample(1:100, 7, replace = T))
fitjags <- jags.model ("model_multi.txt",
list ("x" = x),
n.chains = 2, quiet = T, n.adapt = 1000)
sum(x)
fitjags <- jags.model ("model_multi.txt",
list ("x" = x
"n" = sum(x)),
fitjags <- jags.model ("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
fitjags <- jags.model ("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
x
is.integer(x)
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
is.vector(x)
x <- as.matrix(x)
x
x <- as.integer(sample(1:100, 7, replace = T))
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
x <- as.matrix(x)
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
x <- t(x)
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
x <- as.integer(sample(1:100, 7, replace = T))
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
x <- as.integer(sample(1:100, 7, replace = T))
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
x <- as.integer(sample(1:100, 7, replace = T))
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x)),
n.chains = 2, quiet = T, n.adapt = 1000)
seq(0.01, 0.07, by = 0.01)
x <- as.integer(sample(1:100, 7, replace = T))
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x),
"vec" = seq(0.01, 0.07, by = 0.01)),
n.chains = 2, quiet = T, n.adapt = 1000)
x <- as.integer(sample(1:100, 7, replace = T))
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x),
"vec" = seq(0.01, 0.07, by = 0.01)),
n.chains = 2, quiet = T, n.adapt = 1000)
update(fitjags, n.burnin, progress.bar = "none")
update(fitjags, 5000, progress.bar = "none")
fit.fixed <- coda.samples(fitjags, c("p"), 10000, 5,
progress.bar = "none")
summary(fit.fixed)
sum(summary(fit.fixed)[[1]][, 1]
)
source("do_simulation.R")
source("generate_data.R")
source("models.R")
source("evaluate.R")
x <- sim.dat()
dim(x)
comp <- rep(1:(ncol(x)/3), each = nrow(x) * 3) # three columns are put below each other per rater
rater <- rep(rep(1:3, each = nrow(x)), (ncol(x)/3)) # each question is asked in one row
r <- fun.trans(x, comp, rater) # x or y?! first function: y; second function: x!
dim(r)
comp
dim(x)
# For dmulti:
fun.trans <- function(x, comp, rater) {
r <- sort(unique(as.vector(x)))
x.dat <- as.data.frame(x)
for (j in 1:ncol(x)) {
x.dat[, j] <- factor(x.dat[, j], levels = r)
}
r.a <- array(NA, dim = c(length(unique(rater)), length(r), length(unique(comp))))
for (i in 1:dim(r.a)[1]) {
for (j in 1:dim(r.a)[3]) {
r.a[i, , j] <- table(x.dat[, 3*(j-1) + i])
}
}
n.ov <- nrow(x.dat)
return(list("r.a" = r.a, "n.ov" = n.ov))
}
r <- fun.trans(x, comp, rater) # x or y?! first function: y; second function: x!
dim(r$r.a)
x <- r$r.a[1, , 1]
x
fitjags <- jags.model("model_multi.txt",
list ("x" = x,
"n" = sum(x),
"vec" = seq(0.01, 0.07, by = 0.01)),
n.chains = 2, quiet = T, n.adapt = 1000)
update(fitjags, 5000, progress.bar = "none")
fit.fixed <- coda.samples(fitjags, c("p"), 10000, 5,
progress.bar = "none")
summary(fit.fixed)
# 1=unshaved; 2=mechanically shaved; 3=digitally shaved:
a.c <- matrix(c(1, 1, 3, 2, 3, 2), ncol = 2)
# Fixed effects model:
inits <- list(
list (d = c(NA, 0.1, -0.1),
mucat = seq(-0.3, 0.2, by = 0.1),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 12345),
list (d = c(NA, -0.05, 0.05),
mucat = seq(0.3, -0.2, by = -0.1),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 12345)
)
fitjags <- jags.model ("model_ordinal_fixed.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
# "x" = r$r.a,
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
x <- sim.dat()
comp <- rep(1:(ncol(x)/3), each = nrow(x) * 3) # three columns are put below each other per rater
rater <- rep(rep(1:3, each = nrow(x)), (ncol(x)/3)) # each question is asked in one row
r <- fun.trans(x, comp, rater) # x or y?! first function: y; second function: x!
# structure of r:
# first dimension: questions (the object name "rater" above is misleading!)
# second dimension: ratings - 1:
# Sum of ratings:
# If a rater says 3 (favors second option), then no count
# If a rater says 2 (favors second option), then last element is count + 1.
# If a rater says 1 (favors second option), then the last and the one before is count + 1.
# ...
# third dimension: raters (the object name "comp" above is misleading!)
# Example:
# r$r.a[1, 6, 2] describes the number of ratings of rater 2 in question 1 (unshaved vs.
# mechanically shaved) that were 2 or lower (because we are looking at the 6th element of
# the vector (-3, -2, -1, 0, 1, 2, 3).
# 1=unshaved; 2=mechanically shaved; 3=digitally shaved:
a.c <- matrix(c(1, 1, 3, 2, 3, 2), ncol = 2)
require(coda)
# Fixed effects model:
inits <- list(
list (d = c(NA, 0.1, -0.1),
mucat0 = seq(-0.3, 0.2, by = 0.1),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 12345),
list (d = c(NA, -0.05, 0.05),
mucat0 = seq(0.3, -0.2, by = -0.1),
.RNG.name = "base::Mersenne-Twister", .RNG.seed = 12345)
)
fitjags <- jags.model ("model_ordinal_fixed.txt",
list ("n.r" = ncol(x)/3,
"n.c" = 3,
"n.cat" = 6,
"r.a" = r$r.a,
# "n.a" = r$n.a, # first fun.trans()
"n.ov" = r$n.ov, # second fun.trans()
# "x" = r$r.a,
"a.c" = a.c),
inits = inits,
n.chains = 2, quiet = T, n.adapt = 1000)
update(fitjags, n.burnin, progress.bar = "none")
update(fitjags, 5000, progress.bar = "none")
fit.fixed <- coda.samples(fitjags, c("d", "dd", "best", "mucat"), 10000, 5,
progress.bar = "none")
summary(fit.fixed)
source("do_simulation.R")
source("generate_data.R")
source("models.R")
source("evaluate.R")
system.time(sim.study1 <- do.sim(n.sim = 100,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
system.time(sim.study1 <- do.sim(n.sim = 100,
model = c("fixed.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
sim.study1$p_res
system.time(sim.study1 <- do.sim(n.sim = 1000,
model = c("fixed.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
sim.study1$p_res
system.time(sim.study1 <- do.sim(n.sim = 100,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
system.time(sim.study1 <- do.sim(n.sim = 100,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
system.time(sim.study1 <- do.sim(n.sim = 100,
model = c("random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
sim.study1$p_res
cl <- makeCluster(6)#, type = "PSOCK")
registerDoParallel(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
system.time(sim.study2 <- do.sim(n.sim = 100,
tau_AB = sqrt(0.05), tau_AC = sqrt(0.05), tau_CB = sqrt(0.05),
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
sim.study2$p_res
system.time(sim.study1 <- do.sim(n.sim = 24,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
# n.burnin = 500, n.iter = 1000,
n.cores = 6))
source("do_simulation.R")
source("generate_data.R")
source("models.R")
source("evaluate.R")
system.time(sim.study1 <- do.sim(n.sim = 24,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
# n.burnin = 500, n.iter = 1000,
n.cores = 6))
177.324/24*10000/3600
system.time(sim.study1 <- do.sim(n.sim = 1000,
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 12345, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 500, n.iter = 1000,
n.cores = 6))
sim.study1$p_res
?jags.model
?rjags::jags.model
?coda.samples
source("do_simulation.R")
source("generate_data.R")
source("models.R")
system.time(sim.study2 <- do.sim(n.sim = 24,
tau_AB = sqrt(0.05), tau_AC = sqrt(0.05), tau_CB = sqrt(0.05),
model = c("fixed.ordinal", "random.ordinal",
"wilcox", "wilcox.clust"),
seed = 85206, alpha = 0.05,
sigma_AB = 2, sigma_AC = 2, sigma_CB = 2,
n.burnin = 1000, n.iter = 1000, n.thin = 2,
n.cores = 6))
sim.study2$p_res
load("scenarios_1/sim.study1.RData")
sim.study1$p_res
eval.sim(sim.study1)
source("do_simulation.R")
source("generate_data.R")
source("models.R")
source("evaluate.R")
load("scenarios_1/sim.study1.RData")
sim.study1$p_res
eval.sim(sim.study1)
rm(sim.study1)
source("evaluate.R")
load("scenarios_1/sim.study1.RData")
sim.study1$p_res
eval.sim(sim.study1)
eval.sim(sim.study1, k = 2)
eval.sim(sim.study1, k = 4)
source("do_simulation.R")
source("generate_data.R")
source("models.R")
source("evaluate.R")
load("scenarios_1/sim.study1.RData")
sim.study1$p_res
eval.sim(sim.study1, k = 4)
rm(sim.study1)
load("scenarios_2/sim.study2.RData")
sim.study2$p_res
eval.sim(sim.study2)
rm(sim.study2)
load("scenarios_1/sim.study1.RData")
sim.study1$p_res
eval.sim(sim.study1, k = 3)
rm(sim.study1)
load("scenarios_2/sim.study2.RData")
sim.study2$p_res
eval.sim(sim.study2)
rm(sim.study2)
# evaluate results:
load("scenarios_2/sim.study2.RData")
sim.study2$p_res
eval.sim(sim.study2, k = 3)
rm(sim.study2)
